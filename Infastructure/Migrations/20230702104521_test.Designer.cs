// <auto-generated />
using System;
using Infastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infastructure.Migrations
{
    [DbContext(typeof(SpotifyDbContext))]
    [Migration("20230702104521_test")]
    partial class test
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Entities.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConfirmPassword")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ConfirmPassword = "Qwerty-1",
                            Email = "Alextest@gmail.com",
                            FirstName = "Alex",
                            Image = "https://example.com/popplaylist.jpg",
                            LastName = "Alex123",
                            Password = "Qwerty-1"
                        });
                });

            modelBuilder.Entity("Core.Entities.Albom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ArtistId");

                    b.ToTable("Alboms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ArtistId = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1030),
                            Description = "This is the first album.",
                            Duration = 60,
                            GenreId = 1,
                            Image = "https://example.com/album1.jpg",
                            ShareUrl = "https://example.com/album1",
                            Title = "Album 1"
                        },
                        new
                        {
                            Id = 2,
                            ArtistId = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1034),
                            Description = "This is the second album.",
                            Duration = 60,
                            GenreId = 2,
                            Image = "https://example.com/album1.jpg",
                            ShareUrl = "https://example.com/album1",
                            Title = "Album 2"
                        },
                        new
                        {
                            Id = 3,
                            ArtistId = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1036),
                            Description = "This is the 3 album.",
                            Duration = 60,
                            GenreId = 1,
                            Image = "https://example.com/album1.jpg",
                            ShareUrl = "https://example.com/album1",
                            Title = "Album 3"
                        });
                });

            modelBuilder.Entity("Core.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PublisherId")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PublisherId");

                    b.ToTable("Artists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(973),
                            Description = "Pablo Ruiz Picasso was a Spanish painter, sculptor, printmaker, ceramicist and theatre designer who spent most of his adult life in France.",
                            Image = "https://example.com/picasso.jpg",
                            Nickname = "Picasso",
                            PublisherId = 1,
                            ShareUrl = "https://example.com/picasso"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(978),
                            Description = "Vincent Willem van Gogh was a Dutch post-impressionist painter who is among the most famous and influential figures in the history of Western art.",
                            Image = "https://example.com/vangogh.jpg",
                            Nickname = "Van Gogh",
                            PublisherId = 1,
                            ShareUrl = "https://example.com/vangogh"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(981),
                            Description = "Leonardo di ser Piero da Vinci was an Italian polymath whose areas of interest included invention, drawing, painting, sculpting, architecture, science, music, mathematics, engineering, literature, anatomy, geology, astronomy, botany, writing, history, and cartography.",
                            Image = "https://example.com/davinci.jpg",
                            Nickname = "Da Vinci",
                            PublisherId = 1,
                            ShareUrl = "https://example.com/davinci"
                        });
                });

            modelBuilder.Entity("Core.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1056),
                            Description = "Popular music characterized by upbeat melodies and catchy hooks.",
                            Image = "https://example.com/genres/pop.jpg",
                            Name = "Pop",
                            ShareUrl = "https://example.com/genres/pop"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1061),
                            Description = "Guitar-driven music that originated in the 1950s and has evolved into various subgenres.",
                            Image = "https://example.com/genres/rock.jpg",
                            Name = "Rock",
                            ShareUrl = "https://example.com/genres/rock"
                        },
                        new
                        {
                            Id = 3,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1063),
                            Description = "Music that originated in African American and Latino communities in the Bronx in the 1970s, characterized by rapping, beats, and samples.",
                            Image = "https://example.com/genres/hiphop.jpg",
                            Name = "Hip-Hop",
                            ShareUrl = "https://example.com/genres/hiphop"
                        },
                        new
                        {
                            Id = 4,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1066),
                            Description = "Music that relies heavily on electronic instruments and technology, and can range from ambient to dance-oriented.",
                            Image = "https://example.com/genres/electronic.jpg",
                            Name = "Electronic",
                            ShareUrl = "https://example.com/genres/electronic"
                        });
                });

            modelBuilder.Entity("Core.Entities.GenrePlaylist", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("text");

                    b.HasKey("GenreId", "PlaylistId");

                    b.HasIndex("PlaylistId");

                    b.ToTable("GenrePlaylists");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            PlaylistId = 2,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1126),
                            Description = "Playlist of Rock music",
                            Image = "https://example.com/rockplaylist.jpg",
                            ShareUrl = "https://example.com/rockplaylist"
                        },
                        new
                        {
                            GenreId = 2,
                            PlaylistId = 2,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1130),
                            Description = "Playlist of Pop music",
                            Image = "https://example.com/popplaylist.jpg",
                            ShareUrl = "https://example.com/popplaylist"
                        });
                });

            modelBuilder.Entity("Core.Entities.Playlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int?>("GenrePlaylistGenreId")
                        .HasColumnType("integer");

                    b.Property<int?>("GenrePlaylistPlaylistId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("GenrePlaylistGenreId", "GenrePlaylistPlaylistId");

                    b.ToTable("Playlists");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1106),
                            Description = "This is Playlist1",
                            Duration = 3600,
                            Image = "https://example.com/playlist1.jpg",
                            ShareUrl = "https://example.com/playlist1",
                            Title = "Playlist1"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1110),
                            Description = "This is Playlist2",
                            Duration = 7200,
                            Image = "https://example.com/playlist2.jpg",
                            ShareUrl = "https://example.com/playlist2",
                            Title = "Playlist2"
                        });
                });

            modelBuilder.Entity("Core.Entities.PlaylistTrack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("PlaylistId")
                        .HasColumnType("integer");

                    b.Property<int>("TrackId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PlaylistId");

                    b.HasIndex("TrackId");

                    b.ToTable("PlaylistTracks");
                });

            modelBuilder.Entity("Core.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(796),
                            DateUpdated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(839),
                            Description = "Global music corporation",
                            Image = "https://example.com/universalmusic.jpg",
                            Name = "Universal Music Group",
                            ShareUrl = "https://example.com/universalmusic"
                        },
                        new
                        {
                            Id = 2,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(844),
                            DateUpdated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(846),
                            Description = "American music company",
                            Image = "https://example.com/sonymusic.jpg",
                            Name = "Sony Music Entertainment",
                            ShareUrl = "https://example.com/sonymusic"
                        });
                });

            modelBuilder.Entity("Core.Entities.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlbumId")
                        .HasColumnType("integer");

                    b.Property<int>("ArtistId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Duration")
                        .HasColumnType("integer");

                    b.Property<int>("GenreId")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShareUrl")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AlbumId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("GenreId");

                    b.ToTable("Tracks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AlbumId = 2,
                            ArtistId = 1,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1083),
                            Description = "This is the first track by Artist1.",
                            Duration = 180,
                            GenreId = 1,
                            Image = "onkajzly.cbc.jpg",
                            Path = "/TrackStorage/Track1.mp3",
                            ShareUrl = "https://example.com/track1",
                            Title = "Track1"
                        },
                        new
                        {
                            Id = 2,
                            AlbumId = 2,
                            ArtistId = 2,
                            DateCreated = new DateTime(2023, 7, 2, 13, 45, 21, 123, DateTimeKind.Utc).AddTicks(1088),
                            Description = "This is the second track by Artist2.",
                            Duration = 240,
                            GenreId = 2,
                            Image = "https://example.com/track2.jpg",
                            Path = "/TrackStorage/Track2.mp3",
                            ShareUrl = "https://example.com/track2",
                            Title = "Track2"
                        });
                });

            modelBuilder.Entity("Core.Entities.Albom", b =>
                {
                    b.HasOne("Core.Entities.Artist", "Artist")
                        .WithMany("Albums")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Core.Entities.Artist", b =>
                {
                    b.HasOne("Core.Entities.Publisher", "Publisher")
                        .WithMany("Artists")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Core.Entities.GenrePlaylist", b =>
                {
                    b.HasOne("Core.Entities.Genre", "Genre")
                        .WithMany("GenrePlaylists")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Playlist", "Playlist")
                        .WithMany("GenrePlaylists")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Core.Entities.Playlist", b =>
                {
                    b.HasOne("Core.Entities.GenrePlaylist", null)
                        .WithMany("Playlists")
                        .HasForeignKey("GenrePlaylistGenreId", "GenrePlaylistPlaylistId");
                });

            modelBuilder.Entity("Core.Entities.PlaylistTrack", b =>
                {
                    b.HasOne("Core.Entities.Playlist", "Playlist")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Track", "Track")
                        .WithMany("PlaylistTracks")
                        .HasForeignKey("TrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Playlist");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("Core.Entities.Track", b =>
                {
                    b.HasOne("Core.Entities.Albom", "Albom")
                        .WithMany("Tracks")
                        .HasForeignKey("AlbumId");

                    b.HasOne("Core.Entities.Artist", "Artist")
                        .WithMany("Tracks")
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Genre", "Genre")
                        .WithMany("Tracks")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Albom");

                    b.Navigation("Artist");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Core.Entities.Albom", b =>
                {
                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Core.Entities.Artist", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Core.Entities.Genre", b =>
                {
                    b.Navigation("GenrePlaylists");

                    b.Navigation("Tracks");
                });

            modelBuilder.Entity("Core.Entities.GenrePlaylist", b =>
                {
                    b.Navigation("Playlists");
                });

            modelBuilder.Entity("Core.Entities.Playlist", b =>
                {
                    b.Navigation("GenrePlaylists");

                    b.Navigation("PlaylistTracks");
                });

            modelBuilder.Entity("Core.Entities.Publisher", b =>
                {
                    b.Navigation("Artists");
                });

            modelBuilder.Entity("Core.Entities.Track", b =>
                {
                    b.Navigation("PlaylistTracks");
                });
#pragma warning restore 612, 618
        }
    }
}
